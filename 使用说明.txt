1.conn_test_server
(1)        -h --help
使用帮助。
(2)        -v --version
软件版本。
(3)        -p --port
监听端口号，默认5555。
(4)        -j --bind
绑定IP地址，默认绑定任意IP地址。
(5)        -g --granularity
服务端发送数据粒度大小，默认为1M。
说明：在交互模式下，也就是一个交互服务端发送数据的大小。
(6)        -d --duplicate
一个回复数据粒度数据重复量的大小，必须能被granularity整除，默认等于granularity。，把生成的随机数据冗余granularity/duplicate份以扩充到granularity大小,只在没有指定文件时生效。
(7)        -m --same
开启每条连接数据相同模式，只在粒度冗余模式和混乱模式下有效，默认不开启。	不开启该选项掩码随机。
(8)        -r --random
表示数据随机性质，默认值为1。
0 数据按照设定粒度大小冗余。		简单的加密，不会乱序原来的数据，每个字节XOR mask[(pos % sizeof(unsigned int))]，异或mask的一个byte。
1 数据完全随机。
2 数据全0。
3 混乱模式。						打乱顺序并加密。
说明：混乱模式指在一个数据粒度内，按照block个块随机打乱顺序待发送数据。此种模式对流缓存效果和性能来说是个噩梦。
(9)        -k --block
混乱模式下数据粒度分块的大小，其他模式无效。分块大小必须能被数据粒度整除。
(10)       -b --buffer
tcp接收和发送缓冲区大小(KB)，默认系统默认值。
说明：在主机内存较小，而又需要跑很多连接的情况下，可把此值改小，甚至是0。如果需要跑很少的连接，并且又需要跑大吞吐，可以将此值设置尽量大一些，如1024。
(11)       -l --length
默认一次发送最大数据长度，默认为4096。
(12)       -s --seed
随机数随机化种子，默认按照当前时间随机。
说明：指定了随机化种子后，随机模式或其他随机情况的序列基本确定，对测试流缓存第二遍有用，但需要重启程序。
(13)       -f --file
数据文件路径，在粒度冗余模式和混乱模式下，数据可从文件导入。
说明：如果文件大小小于发送数据粒度，那么文件数据将缓存重复填满发送数据粒度缓冲区。
(14)       -e --scope
随机数生成模式，如果为32表示32位随机，其他表示64位随机，默认为64位随机。
(15)       -c --check
校验数据正确性，如果有错，程序退出，默认不校验。	非交互模式下，该选项无效。
(16)       -a --alternative
开启交互式发包，默认非交互。	交互模式意思是说发完 -g 大小的包以后就停下来等待客户端发送CRC校验回来
说明：非交互模式下，不能和校验选项同时启用。
(17)       -q --nodelay
所有连接禁用Nagle算法，默认启用Nagle算法。
(18)       -t --limit
流控限速，该功能精度较低，尤其在流控1MBps以下，不宜用在精度要求较高的场合。
(19)       -z --multi-process
多进程模式，可以同时启用多个进程监听一个端口，仅在linux下有效且进程数必须小于64。
(20)       -n --silent
无声模式，即后台运行模式。
(21)       -y --http
监听HTTP端口号，显示连接数、流量和速度，默认不监听，多进程模式无法使用。





2.conn_test_client
(1)        -h --help
使用帮助。
(2)        -v --version
软件版本。
(3)        -i --ip
连接IP地址，默认127.0.0.1。
(4)        -p --port
连接端口号，默认5555
(5)        -j --bind
绑定IP地址，默认系统选择。
(6)        -g --granularity
服务端发送数据粒度大小，默认为1M。	就是一个过程中传输的数据量大小
说明：在交互模式下，也就是一个交互服务端发送数据的大小，这个值必须跟服务端保持一致，否则程序退出。
(7)        -c --count
连接数数量，默认1个。
(8)        -r --repeat
请求的重复次数，默认为无限次，如果设置成0，则表示无限重复。
说明：如果需要长时间跑数据，这个值需要改大，但不能越过32位整形，如100000000。因此：一条连接传输的数据量=granularity*repeat。
(9)        -o --out
数据输出路径，默认当前路径out.txt文件，仅在交互模式下有效。
文件第一列表示连接序号，第二列表示第几次交互，第三列表示本次交互时间(ms)。
(10)       -d --delay
连接建立的延迟，默认0ms。
说明：服务端监听队列为1024，因此如果连接数大于1024，最好设置此值，如10，以免连接建立不成功。
(11)       -b --buffer
tcp接收和发送缓冲区大小，默认系统默认值。
说明：在主机内存较小，而又需要跑很多连接的情况下，可把此值改小，甚至是0(KB)。如果需要跑很少的连接，并且又需要跑大吞吐，可以将此值设置尽量大一些，如1024(KB)。
(12)       -l --relay
接力模式接力次数，默认不为接力模式。接力模式指前一个连接断开后才能开始后一个连接。最大连接数为 -c 设置的值，如果有连接断开则新建连接，连接数一个有 -l * -c 条
说明：持续跑短连接需要设置该选项的值
(13)       -t --time
显示传输速度的间隔时间，默认为1s，如果设置成0，则不显示。
(14)       -a --alternative
开启交互式发包，默认非交互。
说明：此值必须和服务端设置一致。
(15)       -q --nodelay
所有连接禁用Nagle算法，默认启用Nagle算法。
(16)       -n --silent
无声模式，即后台运行模式。
(17)       -y --http
监听HTTP端口号，显示连接数、流量和速度，默认不监听。

3.sort
gnu的sort Windows实现，linux系统自带不需要。
对输出的数据进行排序，使用示例sort -n out.txt > out2.txt。

4.conn_test_stat
参数只有一个，即请求重复次数，默认为10次。
对sort处理后的数据进行分析，包括每条连接的平均响应时间、方差以及总的响应时间。

5.示例(服务端ip为1.1.1.1)

(1)单条连接长时间跑大吞吐随机数据
服务端：conn_test_server -p 6000 -b 1024
客户端：conn_test_client -i 1.1.1.1 -p 6000 -b 1024

(2)5000连接长时间跑大吞吐（按照每个连接200M数据重复）
服务端：conn_test_server -p 6000 -g 200M -r 0
客户端：conn_test_client -i 1.1.1.1 -p 6000 -g 200M -c 5000 -d 10

(3)5000连接长时间跑大吞吐（按照每个连接1M数据重复），并且每隔2s显示一次速度
服务端：conn_test_server -p 6000 -d 1M -r 0
客户端：conn_test_client -i 1.1.1.1 -p 6000 -c 5000 -d 10 -t 2

(4)1000并发短连接（每个连接发送1K随机数据，-a不是必须的，但加了可以使连接尽量正常关闭）
服务端：conn_test_server -p 6000 -g 1K -a
客户端：conn_test_client -i 1.1.1.1 -p 6000 -g 1K -c 1000 -r 1 -l 100000000 -a

(5)1000并发连接跑1K随机交互数据
服务端：conn_test_server -p 6000 -g 1K -a
客户端：conn_test_client -i 1.1.1.1 -p 6000 -g 1K -c 1000 -a

(6)10M文件a.dat按照4096字节一个块随机打乱并使用一个连接传输数据
服务端：conn_test_server -p 6000 -g 10M -r 3 -k 4096 -f a.dat
客户端：conn_test_client -i 1.1.1.1 -p 6000 -g 10M

(7)常用功能速查
a.单连接第一遍
服务端：conn_test_server
客户端：conn_test_client -i 1.1.1.1

b.单连接第二遍
服务端：conn_test_server -r 0
客户端：conn_test_client -i 1.1.1.1

c.1000连接第一遍
服务端：conn_test_server
客户端：conn_test_client -i 1.1.1.1 -c 1000

d.1000连接第二遍
服务端：conn_test_server -r 0
客户端：conn_test_client -i 1.1.1.1 -c 1000

注意：linux系统开启大量连接跑数据前，需查看是否需要修改文件描述符限制（使用ulimit -n查看和修改）。